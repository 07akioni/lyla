{"version":3,"sources":["index.js","instance.js","adapter.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.matchError = exports.catchError = exports.lyla = void 0;\nvar instance_1 = require(\"./instance\");\nObject.defineProperty(exports, \"lyla\", { enumerable: true, get: function () { return instance_1.lyla; } });\nObject.defineProperty(exports, \"catchError\", { enumerable: true, get: function () { return instance_1.catchError; } });\nObject.defineProperty(exports, \"matchError\", { enumerable: true, get: function () { return instance_1.matchError; } });\n","\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.matchError = exports.catchError = exports.lyla = void 0;\nconst core_1 = require(\"@lylajs/core\");\nconst adapter_1 = require(\"./adapter\");\n_a = (0, core_1.createLyla)({ adapter: adapter_1.adapter }), exports.lyla = _a.lyla, exports.catchError = _a.catchError, exports.matchError = _a.matchError;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.adapter = void 0;\nconst adapter = ({ url, method, headers, body, responseType, onResponse, onNetworkError\n// Not used, just leave it here\n// json,\n// withCredentials,\n// onDownloadProgress,\n// onUploadProgress,\n }) => {\n    const requestTask = wx.request({\n        url,\n        method,\n        header: headers,\n        data: body,\n        responseType,\n        // https://developers.weixin.qq.com/miniprogram/dev/api/network/request/wx.request.html\n        // Docs said if it's not json, response data won't be transformed to json.\n        dataType: 'text',\n        fail(res) {\n            onNetworkError(res);\n        },\n        success(res) {\n            onResponse({\n                body: res.data,\n                status: res.statusCode,\n                statusText: `${res.statusCode}`,\n                headers: res.header\n            }, res);\n        }\n    });\n    return {\n        abort() {\n            requestTask.abort();\n        }\n    };\n};\nexports.adapter = adapter;\n"]}